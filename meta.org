* Meta

This file uses newline-delimited JSON encoding.
Non-JSON lines can be ignored, so you can interpret this file directly without extracting json blocks first.

Meta's data model is much simpler, though, so we won't need full power of JSON.
Meta file is a set of 4-tuples [rowId, element, attribute, value].

Elements and attributes are referenced by ids.
What's more, attributes /are/ elements, so they live in the same namespace.

Values are opaque bytes. Unless you know what they represents, you can't do anything useful about them.

** Core

Now, let's create our first element (attribute).

The next line assigns attribute 0 of element 0 to be "identifier". In other words, we just assigned identifier "identifier" to itself.
#+begin_src json
["0", "0", "identifier"]
#+end_src
(~identifier(0).identifier(0) = "identifier"~)

Next, let's create another attribute.
#+begin_src json
["1", "0", "attribute/value-type"]
#+end_src
(~attribute/value-type(1).identifier(0) = "attribute/value-type")

~attribute/value-type~ is an attribute that specifies type of values of attribute.

Do you remember that values are actually opaque byte blobs? This attribute should help you distinguish them.

So far we have only used one value type—string. Let's define it.
#+begin_src json
["2", "0", "String"]
#+end_src
(~String(2).identifier(0) = "String"~)

Now we can assign String type to identifier attribute. In other words, we say that identifiers are strings.
#+begin_src json
["0", "1", "2"]
#+end_src
(~identifier(0).attribute/value-type(1) = String(2)~)

oh well, we just used another attribute type-reference! Let's define it.
#+begin_src json
["3", "0", "Reference"]
#+end_src
(~Reference(3).identifier(0) = "Reference"~)

and assign ~attribute/value-type~ attribute its proper value-type
#+begin_src json
["1", "1", "3"]
#+end_src
(~attribute/value-type(1).attribute/value-type(1) = Reference(3)~)

We're done?

We have defined a number of attributes that can define further attributes.
From now on the system can define itself.

** Annotator

All these ~["1", "1", "3"]~ are not exactly easy to read.
Let's build a tool to help us!

See [[./meta-query/]] directory for such a tool.

When invoked with ~meta.org --annotate-file~, it prints all Meta rows along with a more human-readable annotation:

#+begin_src sh
$ meta-query/index.js meta.org --annotate-file --only-meta
;; ["0", "0", "identifier"]  //=> identifier(0).identifier(0) = "identifier"
;; ["1", "0", "attribute/value-type"]  //=> attribute/value-type(1).identifier(0) = "attribute/value-type"
;; ["2", "0", "String"]  //=> String(2).identifier(0) = "String"
;; ["0", "1", "2"]  //=> identifier(0).attribute/value-type(1) = String(2)
;; ["3", "0", "Reference"]  //=> Reference(3).identifier(0) = "Reference"
;; ["1", "1", "3"]  //=> attribute/value-type(1).attribute/value-type(1) = Reference(3)
#+end_src

** Documentation

Let's add documentation.
#+begin_src json
["4", "0", "comment"]
["4", "1", "2"]
["4", "4", "Comment attribute. Can be attached to any element to describe its meaning and add useful notes."]

["0", "4", "Identifier is a human-friendly name of the element. Usually assumed to be unique, so you could find element by its identifier."]
["1", "4", "Type of the attribute values."]
["2", "4", "String value must be a valid UTF-8–encoded string."]
["3", "4", "Reference value is an id of another element."]
#+end_src

# #+begin_src json
# ["5", "0", "type"]
# ["5", "4", "Type of the element."]
# ["5", "1", "3"]
# 
# ["6", "0", "Type"]
# ["6", "4", "Element describes a type."]
# ["6", "5", "6"]
# 
# ["7", "0", "Attribute"]
# ["7", "4", "Element describes an attribute."]
# ["7", "5", "6"]
# #+end_src
# 
# assing types to other elements
# #+begin_src json
# # ["0", "5", ]
# #+end_src
